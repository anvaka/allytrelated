var inputFileName = process.argv[2] || './data/youtube-user.json';
var count = process.argv[3] || 100;
var prefix = process.argv[4] || '';

var outputDir = 'data';
var path = require('path');

var fs = require('fs');
var centrality = require('ngraph.centrality');
var pagerank = require('ngraph.pagerank');
var hitsrank = require('ngraph.hits');
var dumpTime = (new Date().toUTCString());

require('./lib/loadGraph.js')(inputFileName, start);

function start(graph) {
  console.log(graph.getLinksCount() + ' edges; ' + graph.getNodesCount() + ' nodes');

  saveFile(
    '01.most-dependent-upon.md',
    centrality.degree(graph, 'in'),
    '# Top ' + count + ' most depended-upon packages'
  );
  saveFile(
    '02.with-most-dependencies.md',
    centrality.degree(graph, 'out'),
    '# Top ' + count + ' packages with most dependencies'
  );

  saveFile(
    '03.pagerank.md',
    pagerank(graph, 0.85, 1e-10),
    '# Top ' + count + ' packages with highest Pagerank'
  );

  saveFile(
    '04.hits-rank.md',
    hitsrank(graph),
    '# Top ' + count + ' packages with highest authority in HITS rank',
    hitsSort, hitsPrint
  );
}

function saveFile(fileName, data, header, sort, print) {
  var name = path.join(outputDir, prefix + fileName);
  var fd = fs.openSync(name, 'w');
  fs.writeSync(fd, '* Date: ' +  dumpTime + '\n');
  fs.writeSync(fd, '* Input file: `' + inputFileName + '`\n');
  fs.writeSync(fd, '\n');

  fs.writeSync(fd, header + '\n');

  printTop(fd, data, sort, print);

  fs.writeSync(fd, '\n');
  fs.writeSync(fd, 'Data generated by https://github.com/anvaka/allytrelated\n');
  fs.closeSync(fd);
}

function printTop(fd, stats, sort, print) {
  sort = sort || byValue;
  print = print || toLink;
  var allKeys = Object.keys(stats);
  var idx = 0;
  var packages = allKeys.sort(sortProxy)
    .slice(0, Math.min(count, allKeys.length))
    .map(mapProxy)
    .join('\n');

  fs.writeSync(fd, '\n');
  fs.writeSync(fd, packages);
  fs.writeSync(fd, '\n');

  function sortProxy(x, y) {
    return sort(stats, x, y);
  }

  function mapProxy(x) {
    return print(stats, x, idx++);
  }

  function byValue(stats, x, y) {
    return stats[y] - stats[x];
  }

  function toLink(stats, x, idx) {
    return idx + '. [' + x + '](https://www.youtube.com/channel/' + x + ') - ' + stats[x];
  }
}

function hitsSort(stats, x, y) {
  return stats[y].authority - stats[x].authority;
}

function hitsPrint(stats, x, idx) {
  return idx + '. [' + x + '](https://www.youtube.com/channel/' + x + ') - ' + stats[x].authority;
}
